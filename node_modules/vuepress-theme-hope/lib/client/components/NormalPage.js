import { usePageFrontmatter } from "@vuepress/client";
import { computed, defineComponent, h, resolveComponent } from "vue";
import MarkdownContent from "@theme-hope/components/MarkdownContent";
import PageMeta from "@theme-hope/components/PageMeta";
import PageNav from "@theme-hope/components/PageNav";
import PageTitle from "@theme-hope/components/PageTitle";
import { useIconPrefix } from "@theme-hope/composables";
import PasswordModal from "@theme-hope/module/encrypt/components/PasswordModal";
import { useThemeLocaleData } from "@theme-hope/composables";
import { usePathEncrypt } from "@theme-hope/module/encrypt/composables";
import { useDarkMode } from "@theme-hope/module/outlook/composables";
import "../styles/page.scss";
export default defineComponent({
    name: "NormalPage",
    setup(_props, { slots }) {
        const frontmatter = usePageFrontmatter();
        const { isDarkMode } = useDarkMode();
        const iconPrefix = useIconPrefix();
        const themeLocale = useThemeLocaleData();
        const { isEncrypted, validateToken } = usePathEncrypt();
        const breadcrumbEnable = computed(() => frontmatter.value.breadcrumb ||
            (frontmatter.value.breadcrumb !== false &&
                themeLocale.value.breadcrumb !== false));
        const breadcrumbIconEnable = computed(() => frontmatter.value.breadcrumbIcon ||
            (frontmatter.value.breadcrumbIcon !== false &&
                themeLocale.value.breadcrumbIcon !== false));
        const tocEnable = computed(() => frontmatter.value.toc ||
            (frontmatter.value.toc !== false && themeLocale.value.toc !== false));
        return () => {
            var _a, _b, _c, _d, _e;
            return h("main", { class: "page", id: "main-content" }, isEncrypted.value
                ? h(PasswordModal, { onVerify: validateToken })
                : [
                    (_a = slots.top) === null || _a === void 0 ? void 0 : _a.call(slots),
                    h(resolveComponent("BreadCrumb"), {
                        enable: breadcrumbEnable.value,
                        icon: breadcrumbIconEnable.value,
                        iconPrefix: iconPrefix.value,
                    }),
                    h(PageTitle),
                    tocEnable.value
                        ? h(resolveComponent("TOC"), {
                            headerDepth: (_b = frontmatter.value.headerDepth) !== null && _b !== void 0 ? _b : themeLocale.value.headerDepth,
                        })
                        : null,
                    (_c = slots.contentBefore) === null || _c === void 0 ? void 0 : _c.call(slots),
                    h(MarkdownContent),
                    (_d = slots.contentAfter) === null || _d === void 0 ? void 0 : _d.call(slots),
                    h(PageMeta),
                    h(PageNav),
                    h(resolveComponent("PageComment"), {
                        darkmode: isDarkMode.value,
                    }),
                    (_e = slots.bottom) === null || _e === void 0 ? void 0 : _e.call(slots),
                ]);
        };
    },
});
//# sourceMappingURL=NormalPage.js.map